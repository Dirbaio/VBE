#include "Keyboard.hpp"

Keyboard::Keyboard() : focus(true) {
}

Keyboard::~Keyboard() {
}

static SDL_Keycode getSDLKeyCode(Keyboard::Key key) {
	switch(key) {
		case Num0: return SDLK_0;
		case Num1: return SDLK_1;
		case Num2: return SDLK_2;
		case Num3: return SDLK_3;
		case Num4: return SDLK_4;
		case Num5: return SDLK_5;
		case Num6: return SDLK_6;
		case Num7: return SDLK_7;
		case Num8: return SDLK_8;
		case Num9: return SDLK_9;
		case A: return SDLK_a;
		case AC_BACK: return SDLK_AC_BACK;
		case AC_BOOKMARKS: return SDLK_AC_BOOKMARKS;
		case AC_FORWARD: return SDLK_AC_FORWARD;
		case AC_HOME: return SDLK_AC_HOME;
		case AC_REFRESH: return SDLK_AC_REFRESH;
		case AC_SEARCH: return SDLK_AC_SEARCH;
		case AC_STOP: return SDLK_AC_STOP;
		case Again: return SDLK_AGAIN;
		case AltErase: return SDLK_ALTERASE;
		case Quote: return SDLK_QUOTE;
		case Application: return SDLK_APPLICATION;
		case AudioMute: return SDLK_AUDIOMUTE;
		case AudioNext: return SDLK_AUDIONEXT;
		case AudioPlay: return SDLK_AUDIOPLAY;
		case AudioPrev: return SDLK_AUDIOPREV;
		case AuidoStop: return SDLK_AUDIOSTOP;
		case B: return SDLK_b;
		case Backslash: return SDLK_BACKSLASH;
		case Backspace: return SDLK_BACKSPACE;
		case BrightnessDown: return SDLK_BRIGHTNESSDOWN;
		case BrightnessUp: return SDLK_BRIGHTNESSUP;
		case C: return SDLK_c;
		case Calculator: return SDLK_CALCULATOR;
		case Cancel: return SDLK_CANCEL;
		case Capslock: return SDLK_CAPSLOCK;
		case Clear: return SDLK_CLEAR;
		case ClearAgain: return SDLK_CLEARAGAIN;
		case Comma: return SDLK_COMMA;
		case Computer: return SDLK_COMPUTER;
		case Copy: return SDLK_COPY;
		case CrSel: return SDLK_CRSEL;
		case CurrencySubUnit: return SDLK_CURRENCYSUBUNIT;
		case CurrencyUnit: return SDLK_CURRENCYUNIT;
		case Cut: return SDLK_CUT;
		case D: return SDLK_d;
		case DecimalSeparator: return SDLK_DECIMALSEPARATOR;
		case Delete: return SDLK_DELETE;
		case DisplaySwitch: return SDLK_DISPLAYSWITCH;
		case Down: return SDLK_DOWN;
		case E: return SDLK_e;
		case Eject: return SDLK_EJECT;
		case End: return SDLK_END;
		case Equals: return SDLK_EQUALS;
		case Escape: return SDLK_ESCAPE;
		case Execute: return SDLK_EXECUTE;
		case Exsel: return SDLK_EXSEL;
		case F: return SDLK_f;
		case F1: return SDLK_F1;
		case F10: return SDLK_F10;
		case F11: return SDLK_F11;
		case F12: return SDLK_F12;
		case F13: return SDLK_F13;
		case F14: return SDLK_F14;
		case F15: return SDLK_F15;
		case F16: return SDLK_F16;
		case F17: return SDLK_F17;
		case F18: return SDLK_F18;
		case F19: return SDLK_F19;
		case F2: return SDLK_F2;
		case F20: return SDLK_F20;
		case F21: return SDLK_F21;
		case F22: return SDLK_F22;
		case F23: return SDLK_F23;
		case F24: return SDLK_F24;
		case F3: return SDLK_F3;
		case F4: return SDLK_F4;
		case F5: return SDLK_F5;
		case F6: return SDLK_F6;
		case F7: return SDLK_F7;
		case F8: return SDLK_F8;
		case F9: return SDLK_F9;
		case Find: return SDLK_FIND;
		case G: return SDLK_g;
		case BackQuote: return SDLK_BACKQUOTE;
		case H: return SDLK_h;
		case Help: return SDLK_HELP;
		case Home: return SDLK_HOME;
		case I: return SDLK_i;
		case Insert: return SDLK_INSERT;
		case J: return SDLK_j;
		case K: return SDLK_k;
		case KBDIllumDown: return SDLK_KBDILLUMDOWN;
		case KBDIllumToggle: return SDLK_KBDILLUMTOGGLE;
		case KBDIllumUp: return SDLK_KBDILLUMUP;
		case Keypad0: return SDLK_KP_0;
		case Keypad00: return SDLK_KP_00;
		case Keypad000: return SDLK_KP_000;
		case Keypad1: return SDLK_KP_1;
		case Keypad2: return SDLK_KP_2;
		case Keypad3: return SDLK_KP_3;
		case Keypad4: return SDLK_KP_4;
		case Keypad5: return SDLK_KP_5;
		case Keypad6: return SDLK_KP_6;
		case Keypad7: return SDLK_KP_7;
		case Keypad8: return SDLK_KP_8;
		case Keypad9: return SDLK_KP_9;
		case KeypadA: return SDLK_KP_A;
		case KeypadAmpersand: return SDLK_KP_AMPERSAND;
		case KeypadAt: return SDLK_KP_AT;
		case KeypadB: return SDLK_KP_B;
		case KeypadBackspace: return SDLK_KP_BACKSPACE;
		case KeypadBinary: return SDLK_KP_BINARY;
		case KeypadC: return SDLK_KP_C;
		case KeypadClear: return SDLK_KP_CLEAR;
		case KeypadClearEntry: return SDLK_KP_CLEARENTRY;
		case KeypadColon: return SDLK_KP_COLON;
		case KeypadComma: return SDLK_KP_COMMA;
		case KeypadD: return SDLK_KP_D;
		case KeypadDoubleAmpersand: return SDLK_KP_DBLAMPERSAND;
		case KeypadDoubleVerticalBar: return SDLK_KP_DBLVERTICALBAR;
		case KeypadDecimal: return SDLK_KP_DECIMAL;
		case KeypadDivide: return SDLK_KP_DIVIDE;
		case KeypadE: return SDLK_KP_E;
		case KeypadEnter: return SDLK_KP_ENTER;
		case KeypadEquals: return SDLK_KP_EQUALS;
		case KeypadEqualsAS400: return SDLK_KP_EQUALSAS400;
		case KeypadExclamation: return SDLK_KP_EXCLAM;
		case KeypadF: return SDLK_KP_F;
		case KeypadGreater: return SDLK_KP_GREATER;
		case KeypadHash: return SDLK_KP_HASH;
		case KeypadHexadecimal: return SDLK_KP_HEXADECIMAL;
		case KeypadLBrace: return SDLK_KP_LEFTBRACE;
		case KeypadLParenthesis: return SDLK_KP_LEFTPAREN;
		case KeypadLess: return SDLK_KP_LESS;
		case KeypadMemAdd: return SDLK_KP_MEMADD;
		case KeypadMemClear: return SDLK_KP_MEMCLEAR;
		case KeypadMemDivide: return SDLK_KP_MEMDIVIDE;
		case KeypadMemMultiply: return SDLK_KP_MEMMULTIPLY;
		case KeypadMemRecall: return SDLK_KP_MEMRECALL;
		case KeypadMemStore: return SDLK_KP_MEMSTORE;
		case KeypadMemSubstract: return SDLK_KP_MEMSUBTRACT;
		case KeypadMinus: return SDLK_KP_MINUS;
		case KeypadMultiply: return SDLK_KP_MULTIPLY;
		case KeypadOctal: return SDLK_KP_OCTAL;
		case KeypadPercent: return SDLK_KP_PERCENT;
		case KeypadPeriod: return SDLK_KP_PERIOD;
		case KeypadPlus: return SDLK_KP_PLUS;
		case KeypadPlusMinus: return SDLK_KP_PLUSMINUS;
		case KeypadPower: return SDLK_KP_POWER;
		case KeypadRBrace: return SDLK_KP_RIGHTBRACE;
		case KeypadRParenthesis: return SDLK_KP_RIGHTPAREN;
		case KeypadSpace: return SDLK_KP_SPACE;
		case KeypadTab: return SDLK_KP_TAB;
		case KeypadVerticalBar: return SDLK_KP_VERTICALBAR;
		case KeypadXor: return SDLK_KP_XOR;
		case L: return SDLK_l;
		case LAlt: return SDLK_LALT;
		case LControl: return SDLK_LCTRL;
		case Left: return SDLK_LEFT;
		case LBracket: return SDLK_LEFTBRACKET;
		case LGUI: return SDLK_LGUI;
		case LShift: return SDLK_LSHIFT;
		case M: return SDLK_m;
		case Mail: return SDLK_MAIL;
		case MediaSelect: return SDLK_MEDIASELECT;
		case Menu: return SDLK_MENU;
		case Minus: return SDLK_MINUS;
		case Mode: return SDLK_MODE;
		case Mute: return SDLK_MUTE;
		case N: return SDLK_n;
		case NumLockClear: return SDLK_NUMLOCKCLEAR;
		case O: return SDLK_o;
		case Oper: return SDLK_OPER;
		case Out: return SDLK_OUT;
		case P: return SDLK_p;
		case PageDown: return SDLK_PAGEDOWN;
		case PageUp: return SDLK_PAGEUP;
		case Paste: return SDLK_PASTE;
		case Pause: return SDLK_PAUSE;
		case Period: return SDLK_PERIOD;
		case Power: return SDLK_POWER;
		case PrintScren: return SDLK_PRINTSCREEN;
		case Prior: return SDLK_PRIOR;
		case Q: return SDLK_q;
		case R: return SDLK_r;
		case RAlt: return SDLK_RALT;
		case RControl: return SDLK_RCTRL;
		case Return: return SDLK_RETURN;
		case Return2: return SDLK_RETURN2;
		case RGUI: return SDLK_RGUI;
		case Right: return SDLK_RIGHT;
		case RBracket: return SDLK_RIGHTBRACKET;
		case RShift: return SDLK_RSHIFT;
		case S: return SDLK_s;
		case ScrollLock: return SDLK_SCROLLLOCK;
		case Select: return SDLK_SELECT;
		case Semicolont: return SDLK_SEMICOLON;
		case Separator: return SDLK_SEPARATOR;
		case Slash: return SDLK_SLASH;
		case Sleep: return SDLK_SLEEP;
		case Space: return SDLK_SPACE;
		case Stop: return SDLK_STOP;
		case Sysreq: return SDLK_SYSREQ;
		case T: return SDLK_t;
		case Tab: return SDLK_TAB;
		case ThousandsSeparator: return SDLK_THOUSANDSSEPARATOR;
		case U: return SDLK_u;
		case Undo: return SDLK_UNDO;
		case Unknown: return SDLK_UNKNOWN;
		case UP: return SDLK_UP;
		case V: return SDLK_v;
		case VolumeDown: return SDLK_VOLUMEDOWN;
		case VolumeUp: return SDLK_VOLUMEUP;
		case W: return SDLK_w;
		case WWW: return SDLK_WWW;
		case X: return SDLK_x;
		case Y: return SDLK_y;
		case Z: return SDLK_z;
		case Ampersand: return SDLK_AMPERSAND;
		case Asterisk: return SDLK_ASTERISK;
		case At: return SDLK_AT;
		case Caret: return SDLK_CARET;
		case Colon: return SDLK_COLON;
		case Dollar: return SDLK_DOLLAR;
		case Exclamation: return SDLK_EXCLAIM;
		case Greater: return SDLK_GREATER;
		case Hash: return SDLK_HASH;
		case LParenthesis: return SDLK_LEFTPAREN;
		case Less: return SDLK_LESS;
		case Percent: return SDLK_PERCENT;
		case Plus: return SDLK_PLUS;
		case Question: return SDLK_QUESTION;
		case DoubleQuote: return SDLK_QUOTEDBL;
		case RParenthesis: return SDLK_RIGHTPAREN;
		case Underscore: return SDLK_UNDERSCOR;
	}
}

void Keyboard::processEvent(const SDL_Event& e) {
	switch(e.type) {
		case SDL_KEYDOWN:
			keysHeld.insert((Key) e.key.keysym.sym);
			break;
		case SDL_KEYUP:
			keysHeld.erase((Key) e.key.keysym.sym);
			break;
		default:
			break;
	}
}

void Keyboard::update() {
	keysHeldOld = keysHeld;
}
